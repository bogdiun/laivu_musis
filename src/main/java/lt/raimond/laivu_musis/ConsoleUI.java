package lt.raimond.laivu_musis;

import lt.raimond.laivu_musis.Exceptions.InvalidCoordinateException;
import lt.raimond.laivu_musis.entities.*;
import lt.raimond.laivu_musis.interfaces.BotServiceInterface;
import lt.raimond.laivu_musis.services.GameDataService;
import lt.raimond.laivu_musis.services.LocalGameService;
import lt.raimond.laivu_musis.services.SimpleBotService;
import lt.raimond.laivu_musis.services.UserService;
import lt.raimond.laivu_musis.runnable.BattleshipBot;

import java.util.concurrent.CountDownLatch;
import java.util.*;

public class ConsoleUI {
    private static Scanner scanner = new Scanner(System.in);
    private static UserService userServerService = new UserService();
    private static GameDataService gameDataService = new GameDataService();
    private static LocalGameService localGameService = new LocalGameService();

    public static void main(String[] args) {
        CountDownLatch latch = new CountDownLatch(1);
        Thread secondaryBot = new Thread(new BattleshipBot(latch, 1));
        boolean botRun = false;

        System.out.println("Welcome to BattleShip Game");
        boolean appRun = true;

        while (appRun) {
            System.out.println("1. New Game");
            System.out.println("2. Run with bot");
            System.out.println("0. Exit Game");
            switch (scanner.nextInt()) {
                case 2:
                    botRun = true;
                    //intentional fallthrough
                case 1:
                    try {
                        //temporary workaround
                        if (botRun) secondaryBot.start();
                        User user = readUserFromConsole();
                        System.out.println("Connecting..");
                        user = userServerService.requestCreateUser(user);

                        if (botRun) latch.await();
                        GameData gameData = gameDataService.requestJoin(user);
                        System.out.printf("%s joined a game [id = %s].\n\n", user.getName(), gameData.getGameId());

                        Board userBoard = localGameService.createGameBoard(gameData);
                        Board enemyBoard = localGameService.createGameBoard(gameData);

                        System.out.println("Waiting for the second player ...");
                        while (!gameDataService.isReadyForShips(gameData) && gameDataService.isReadyForSecondPlayer(gameData)) {
                            Thread.sleep(3000);
                            gameData = gameDataService.requestStatus(gameData);
                        }

                        System.out.println("Ready for ships:\n");
                        System.out.println("1. Preset Ship Locations");
                        System.out.println("2. From console");
                        List<Ship> ships = null;

                        int choice = scanner.nextInt();
                        do {
                            switch (choice) {
                                case 1:
                                    BotServiceInterface auto = new SimpleBotService();
                                    ships = auto.getRandomPresetShipList();
                                    userBoard = localGameService.drawShipsOnBoard(ships, userBoard);
                                    printGameBoard("Ships generated by an autobot: ", userBoard);
                                    break;
                                case 2:
                                    //inputShipsFromConsole should only generate a list
                                    ships = inputShipsFromConsole("Input coordinates of your ships (ie. A1-A5)", userBoard);
                                    System.out.printf("Your ship input: %s\n", localGameService.convertShipsToString(ships));
                                    break;
                                default:
                                    System.out.println("Invalid input");
                            }
                        } while (!(choice == 1 || choice == 1));
                        gameData = gameDataService.requestSetup(gameData, user, ships);

                        while (!gameDataService.isReadyToPlay(gameData)) {
                            Thread.sleep(3000);
                            gameData = gameDataService.requestStatus(gameData);
                        }

                        int turnCount = 0;
                        while (!gameDataService.hasWinner(gameData)) {
                            if (gameDataService.isMyTurn(gameData, user)) {
                                Coordinate turnCoordinate = readCoordinateFromConsole("Input turn coordinate (ie. A1): ");
                                gameData = gameDataService.requestTurn(gameData, user, turnCoordinate);
                                localGameService.updateGameBoards(gameData, user, userBoard, enemyBoard);

                                printGameBoard("Updated " + user.getName(), userBoard);
                                printGameBoard("Updated enemy", enemyBoard);
                                turnCount++;
                            } else {
                                Thread.sleep(3000);
                                gameData = gameDataService.requestStatus(gameData);
                            }
                        }

                        //Game finish code
                        if (gameData.getWinnerUserId().equals(user.getId())) {
                            printGameBoard(String.format("Game finished in %d turns: %s, is so so smart!\n", turnCount, user.getName()), enemyBoard);
                        } else {
                            printGameBoard(String.format("Game finished in %d turns: %s lost.\n", turnCount, user.getName()), userBoard);
                        }
                    } catch (Exception e) {
                        //e.printStackTrace();
                        System.out.println(e.getMessage());
                        appRun = false;
                        break;
                    }
                case 0:
                    System.out.println("Exiting game..");
                    appRun = false;
                    break;
            }
        }
        scanner.close();
    }

    //? recursion vs while(true) vs while(run) ?
    private static List<Ship> inputShipsFromConsole(String title, Board userBoard) {
        List<Ship> ships = new ArrayList<>();
        printGameBoard("Your board", userBoard);
        System.out.println(title);

        int size = 4;
        for (int j = 1; j <= 4; j++) {
            for (int i = 1; i <= j; i++) {
                try {
                    Ship ship = readShipFromConsole(String.format("Ship nr.%d coordinates (ship_size=%d): ", ships.size() + 1, size), size);
                    Board temp = localGameService.drawShipOnBoard(ship, userBoard);

                    ships.add(ship);
                    userBoard = temp;
                } catch (Exception e) {
                    System.out.printf("Error: %s", e.getMessage());
                    i--;
                }
            }
            size--;
        }
        printGameBoard("Final board", userBoard);
        return ships;
    }

    private static User readUserFromConsole() {
        System.out.println("1. New User");
        System.out.println("2. Default");

        while (true) {
            switch (scanner.nextInt()) {
                case 1:
                    System.out.print("Enter user name: ");
                    String name = scanner.next();
                    System.out.print("Enter user email: ");
                    String email = scanner.next();
                    return new User("", name, email);
                case 2:
                    System.out.println("user: Tester; email: tester@mail.lt");
                    return new User("", "Tester", "tester@mail.lt");
                default:
                    System.out.println("Invalid input");
                    //return readUserFromConsole();
            }
        }
    }

    private static Ship readShipFromConsole(String note, int size) {
        System.out.print(note);
        while (true) {
            String shipAsString = scanner.next();
            try {
                Ship ship = localGameService.parseShip(shipAsString);
                if (ship.getSize() == size) {
                    return ship;
                } else throw new InvalidCoordinateException("Ship size " + size + "was expected");
            } catch (InvalidCoordinateException e) {
                System.out.println("Invalid coordinate input: " + e.getMessage());
                //return readShipFromConsole(note,size);
            }
        }
    }

    private static Coordinate readCoordinateFromConsole(String note) {
        System.out.print(note);
        while (true) {
            String coordAsString = scanner.next();
            try {
                return localGameService.parseCoordinate(coordAsString);
            } catch (InvalidCoordinateException e) {
                System.out.println("Invalid input: " + e.getMessage());
                //return readCoordinateFromConsole(note);
            }
        }
    }

    private static void printGameBoard(String title, Board board) {
        System.out.printf("%s\n\n", title);
        String template = "%2s";

        printBoardRow(board.getHeader(), " ", template);

        for (int i = 0; i < board.size(); i++) {
            printBoardRow(board.getRow(i), "" + i, template);
        }
        System.out.println();
    }

    private static void printBoardRow(String[] row, String indexAsString, String temp) {
        StringBuilder template = new StringBuilder(temp);
        List<String> values = new LinkedList<>();

        values.add(indexAsString);
        values.addAll(Arrays.asList(row));
        for (int i = 0; i < row.length; i++) {
            template.append(temp);
        }

        System.out.println(String.format(template.toString(), values.toArray()));
    }
}
